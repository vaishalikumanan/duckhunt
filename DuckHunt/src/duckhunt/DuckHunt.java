/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package duckhunt;

import java.awt.*;
import java.io.*;
import java.util.*;
import java.util.logging.*;
import javax.imageio.ImageIO;

/**
 *
 * @author kumav1176
 */

public class DuckHunt extends javax.swing.JFrame {

    /**
     * Creates new form DuckHunt
     */
    
    //get background images
    Image backgroundImage = ImageIO.read(getClass().getResource("background.png"));
    Image startImage = ImageIO.read(getClass().getResource("start.png"));
    Image nextRoundImage = ImageIO.read(getClass().getResource("nextround.png"));
    Image endImage = ImageIO.read(getClass().getResource("gameover.png"));

    ArrayList <Duck> ducks = new ArrayList<>();
    
    int shots = 0;
    int speed = 0;
    int score = 0;
    int passingScore = 0;
    int maxDucks = 0;
    int roundNumber = 0;
    
    /* For background images
     * 0 for start game
     * 1 for in game
     * 2 for next round
     * 3 for end game
     */
    int isPlaying = 0; 
    
    
    public DuckHunt() throws IOException {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backgroundPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        backgroundPanel.setToolTipText("");
        backgroundPanel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        backgroundPanel.setPreferredSize(new java.awt.Dimension(1280, 720));
        backgroundPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backgroundPanelMouseClicked(evt);
            }
        });
        backgroundPanel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                backgroundPanelKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout backgroundPanelLayout = new javax.swing.GroupLayout(backgroundPanel);
        backgroundPanel.setLayout(backgroundPanelLayout);
        backgroundPanelLayout.setHorizontalGroup(
            backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1272, Short.MAX_VALUE)
        );
        backgroundPanelLayout.setVerticalGroup(
            backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 689, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backgroundPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1272, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backgroundPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 689, Short.MAX_VALUE)
        );

        setBounds(0, 0, 1280, 720);
    }// </editor-fold>//GEN-END:initComponents

    private void backgroundPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backgroundPanelMouseClicked
        Point coordinates = MouseInfo.getPointerInfo().getLocation();
        //start game button
        if(isPlaying == 0){
            int xmin = 438;
            int xmax = 841;
            int ymin = 324;
            int ymax = 457;
            
            if(xmin <= coordinates.x && coordinates.x <= xmax){
                if(ymin <= coordinates.y && coordinates.y <= ymax){
                    isPlaying = 1;   
                }
            }
        }
        //hitting ducks
        else{
            shots ++;
            
            for(int i = 1; i < ducks.size(); i ++){
                //start from top left corner of image
                //create hitbox based on image dimensions
                int xmin = ducks.get(i).getXCoordinate();
                int xmax = xmin + ducks.get(i).getLength();
                int ymin = ducks.get(i).getYCoordinate();
                int ymax = ymin + ducks.get(i).getLength();
                //if mouse clicks duck
                if(xmin <= coordinates.x && coordinates.x <= xmax){
                    if(ymin <= coordinates.y && coordinates.y <= ymax){
                        //add points, remove duck
                        score ++;
                        ducks.remove(i);
                    }
                }
            }
            
        }
        
        
    }//GEN-LAST:event_backgroundPanelMouseClicked

    private void backgroundPanelKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_backgroundPanelKeyPressed
        
    }//GEN-LAST:event_backgroundPanelKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void sleep(int duration) {
        try {
            Thread.sleep(duration);
        } 
        catch (Exception e) {}
    }
    
    //display information: current score, times clicked, time left
    public void drawText(Graphics g) {
        
        
        g.setColor(Color.white);
        g.setFont(new Font("Bernard MT Condensed", Font.BOLD, 30)); 
        g.drawString("Score: " + score, 1000, 650);
        g.drawString("Shots: " + shots, 150, 650);
        g.drawString("Ducks left: " + maxDucks, 550, 650);
        
        g.drawString("Round: " + roundNumber, 100, 100);
         
    }
    
    public void paint( Graphics g ) {
        //paint background 
        //starting game
        if(isPlaying == 0){
            g.drawImage(startImage, 0, 0, this);
        }
        //playing game
        else if(isPlaying == 1){
            g.drawImage(backgroundImage, 0, 0, this);
            drawText(g);
        }
        else if(isPlaying == 2){
            g.drawImage(nextRoundImage, 0, 0, this);
            drawText(g);
        }
 
        for(int i = 1; i < ducks.size(); i ++){
            //off the screen, remove from arraylist
            if(ducks.get(i).getXCoordinate() > 1200){
                ducks.remove(i);
            }
            //after previous if statement, size of arraylist might be 1
            if(ducks.size() > 1){
                try {
                    //paint duck
                    g.drawImage(ducks.get(i).getImage(), 
                            ducks.get(i).getXCoordinate(),
                            ducks.get(i).getYCoordinate(), rootPane);
                } catch (IOException ex) {
                    Logger.getLogger(DuckHunt.class.getName()).log(Level.SEVERE, null, ex);
                }
                //set new coordinates
                ducks.get(i).move();
            }
        }   
        
        
        //paint background over ducks when game is over
        if(isPlaying == 3){
            g.drawImage(endImage, 0, 0, this);
            drawText(g);
        }
    }
    public void newRound() throws IOException{
        
        Random rand = new Random();
         
        roundNumber ++;
        
        //increase for difficulty
        passingScore += 10;
        speed += 2;
        
        //next round background, pause between rounds, show previous round's info
        if(isPlaying != 0){
            isPlaying = 2;
            repaint();
            sleep(5000);
            
        }
        else{
            isPlaying = 1;
            //have info appear for first round
            maxDucks = passingScore * 2;
            repaint();
            sleep(1000);
        }
        
        //max number of ducks spawned per round
        maxDucks = passingScore * 2;
        
        //reset
        score = 0;
        shots = 0;
        ducks.clear();
        
        //change game status to change background image
        isPlaying = 1;
        
        //random duck to avoid arraylist being empty
        ducks.add(new Duck(speed, 720, 100));
        ducks.get(0).ycoordinate = 900;
        
        //spawn first duck
        ducks.add(new Duck(speed, 720, rand.nextInt()));
        
        maxDucks --;
        
        while(maxDucks > 0 && score < passingScore){
            //if there are ducks on the screen
            if(ducks.size() != 1){
                //wait until most recently spawned duck is past 300px
                if(ducks.get(ducks.size()-1).xcoordinate > 300){
                        ducks.add(new Duck(speed,720,rand.nextInt()));
                        maxDucks --;
                }
                repaint();
            }
            //if no ducks are on the screen, put one on
            else{
                ducks.add(new Duck(speed,720,rand.nextInt()));
                maxDucks --;
                repaint();
            }
        } 
        //after all ducks have spawned, keep repainting until the last ones exit
        while(ducks.size() > 1){
            repaint();
        }
        //advance to next round
        if(score >= passingScore){
           newRound(); 
        }
        //end game
        else{
            gameOver();
        }
    }
    
    public void gameOver(){
        isPlaying = 3;
        repaint();
    }
    
    public static void main(String args[]) throws IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DuckHunt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DuckHunt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DuckHunt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DuckHunt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        final DuckHunt game = new DuckHunt();
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
               game.setVisible(true);
            }
        });   
        //wait for start button to be pressed
        while(game.isPlaying == 0){
            game.sleep(100);
        }
        //start game when button is pressed
        game.isPlaying = 0;
        game.newRound();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel backgroundPanel;
    // End of variables declaration//GEN-END:variables
}
